// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// worldAnalysis_
List worldAnalysis_(NumericVector& wave, double frameshift, int fs, double f0floor, double allowed_range);
RcppExport SEXP _WorldR_worldAnalysis_(SEXP waveSEXP, SEXP frameshiftSEXP, SEXP fsSEXP, SEXP f0floorSEXP, SEXP allowed_rangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type wave(waveSEXP);
    Rcpp::traits::input_parameter< double >::type frameshift(frameshiftSEXP);
    Rcpp::traits::input_parameter< int >::type fs(fsSEXP);
    Rcpp::traits::input_parameter< double >::type f0floor(f0floorSEXP);
    Rcpp::traits::input_parameter< double >::type allowed_range(allowed_rangeSEXP);
    rcpp_result_gen = Rcpp::wrap(worldAnalysis_(wave, frameshift, fs, f0floor, allowed_range));
    return rcpp_result_gen;
END_RCPP
}
// worldAnalysis_f0
List worldAnalysis_f0(NumericVector& wave, NumericVector& Rf0, double frameshift, int fs, double f0floor, double allowed_range);
RcppExport SEXP _WorldR_worldAnalysis_f0(SEXP waveSEXP, SEXP Rf0SEXP, SEXP frameshiftSEXP, SEXP fsSEXP, SEXP f0floorSEXP, SEXP allowed_rangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type wave(waveSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type Rf0(Rf0SEXP);
    Rcpp::traits::input_parameter< double >::type frameshift(frameshiftSEXP);
    Rcpp::traits::input_parameter< int >::type fs(fsSEXP);
    Rcpp::traits::input_parameter< double >::type f0floor(f0floorSEXP);
    Rcpp::traits::input_parameter< double >::type allowed_range(allowed_rangeSEXP);
    rcpp_result_gen = Rcpp::wrap(worldAnalysis_f0(wave, Rf0, frameshift, fs, f0floor, allowed_range));
    return rcpp_result_gen;
END_RCPP
}
// worldF0Estimation_dio
NumericVector worldF0Estimation_dio(NumericVector& wave, double frameshift, int fs, double f0floor, double allowed_range);
RcppExport SEXP _WorldR_worldF0Estimation_dio(SEXP waveSEXP, SEXP frameshiftSEXP, SEXP fsSEXP, SEXP f0floorSEXP, SEXP allowed_rangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type wave(waveSEXP);
    Rcpp::traits::input_parameter< double >::type frameshift(frameshiftSEXP);
    Rcpp::traits::input_parameter< int >::type fs(fsSEXP);
    Rcpp::traits::input_parameter< double >::type f0floor(f0floorSEXP);
    Rcpp::traits::input_parameter< double >::type allowed_range(allowed_rangeSEXP);
    rcpp_result_gen = Rcpp::wrap(worldF0Estimation_dio(wave, frameshift, fs, f0floor, allowed_range));
    return rcpp_result_gen;
END_RCPP
}
// worldF0Estimation_harvest
NumericVector worldF0Estimation_harvest(NumericVector& wave, double frameshift, int fs, double f0floor, double f0ceil);
RcppExport SEXP _WorldR_worldF0Estimation_harvest(SEXP waveSEXP, SEXP frameshiftSEXP, SEXP fsSEXP, SEXP f0floorSEXP, SEXP f0ceilSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type wave(waveSEXP);
    Rcpp::traits::input_parameter< double >::type frameshift(frameshiftSEXP);
    Rcpp::traits::input_parameter< int >::type fs(fsSEXP);
    Rcpp::traits::input_parameter< double >::type f0floor(f0floorSEXP);
    Rcpp::traits::input_parameter< double >::type f0ceil(f0ceilSEXP);
    rcpp_result_gen = Rcpp::wrap(worldF0Estimation_harvest(wave, frameshift, fs, f0floor, f0ceil));
    return rcpp_result_gen;
END_RCPP
}
// worldSynthesis_
NumericVector worldSynthesis_(List world);
RcppExport SEXP _WorldR_worldSynthesis_(SEXP worldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type world(worldSEXP);
    rcpp_result_gen = Rcpp::wrap(worldSynthesis_(world));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_WorldR_worldAnalysis_", (DL_FUNC) &_WorldR_worldAnalysis_, 5},
    {"_WorldR_worldAnalysis_f0", (DL_FUNC) &_WorldR_worldAnalysis_f0, 6},
    {"_WorldR_worldF0Estimation_dio", (DL_FUNC) &_WorldR_worldF0Estimation_dio, 5},
    {"_WorldR_worldF0Estimation_harvest", (DL_FUNC) &_WorldR_worldF0Estimation_harvest, 5},
    {"_WorldR_worldSynthesis_", (DL_FUNC) &_WorldR_worldSynthesis_, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_WorldR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
